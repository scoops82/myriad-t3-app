// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    comments      Comment[]
    userName      String?   @unique
    posts         Post[]

    @@unique([id, userName])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model MediaItem {
    id        String           @id @default(cuid())
    title     String
    creator   String
    mediaType String
    posts     PostMediaItems[]

    @@unique([title, creator, mediaType])
}

model PostMediaItems {
    id          String     @id @default(cuid())
    post        Post?      @relation(fields: [postId], references: [id])
    postId      String?
    mediaItem   MediaItem? @relation(fields: [mediaItemId], references: [id])
    mediaItemId String?

    @@unique([postId, mediaItemId])
}

model Post {
    id          String           @id @default(cuid())
    title       String
    mainContent String           @db.LongText
    createdAt   DateTime         @default(now())
    mediaItems  PostMediaItems[]
    userId      String
    user        User             @relation(fields: [userId], references: [id])
    tags        PostTags[]
    comments    Comment[]
}

model PostTags {
    id     String @id @default(cuid())
    post   Post   @relation(fields: [postId], references: [id])
    tag    Tag    @relation(fields: [tagId], references: [id])
    postId String
    tagId  String

    @@unique([postId, tagId])
}

model Tag {
    id      String     @id @default(cuid())
    tagName String     @unique
    posts   PostTags[]
    // mediaItems MediaItem[]
}

model Comment {
    id          String   @id @default(cuid())
    commentText String
    createdAt   DateTime @default(now())
    userId      String
    user        User     @relation(fields: [userId], references: [id])
    Post        Post?    @relation(fields: [postId], references: [id])
    postId      String?
}
